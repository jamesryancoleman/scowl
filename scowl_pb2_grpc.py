# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import scowl_pb2 as scowl__pb2


class BootstrapStub(object):
    """the interfaces exported by the bootstrapping server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GeneratorJoin = channel.unary_unary(
                '/Bootstrap/GeneratorJoin',
                request_serializer=scowl__pb2.PeerCtx.SerializeToString,
                response_deserializer=scowl__pb2.Id32Bit.FromString,
                )
        self.ConsumerJoin = channel.unary_unary(
                '/Bootstrap/ConsumerJoin',
                request_serializer=scowl__pb2.PeerCtx.SerializeToString,
                response_deserializer=scowl__pb2.Id128Bit.FromString,
                )


class BootstrapServicer(object):
    """the interfaces exported by the bootstrapping server
    """

    def GeneratorJoin(self, request, context):
        """An RPC for a generator to request credentials from
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsumerJoin(self, request, context):
        """An RPC for a consumer to request credentials from
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BootstrapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GeneratorJoin': grpc.unary_unary_rpc_method_handler(
                    servicer.GeneratorJoin,
                    request_deserializer=scowl__pb2.PeerCtx.FromString,
                    response_serializer=scowl__pb2.Id32Bit.SerializeToString,
            ),
            'ConsumerJoin': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumerJoin,
                    request_deserializer=scowl__pb2.PeerCtx.FromString,
                    response_serializer=scowl__pb2.Id128Bit.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Bootstrap', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bootstrap(object):
    """the interfaces exported by the bootstrapping server
    """

    @staticmethod
    def GeneratorJoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bootstrap/GeneratorJoin',
            scowl__pb2.PeerCtx.SerializeToString,
            scowl__pb2.Id32Bit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConsumerJoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Bootstrap/ConsumerJoin',
            scowl__pb2.PeerCtx.SerializeToString,
            scowl__pb2.Id128Bit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
